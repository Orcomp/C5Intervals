// <copyright file="PexIntervals.OverlapTester.g.cs">Copyright ©  2013</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using C5.intervals;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using C5.Pex.Factories;

namespace C5.Pex
{
    public partial class PexIntervals
    {
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
[PexRaisedContractException]
public void OverlapTesterThrowsContractException416()
{
    bool b;
    b = this.OverlapTester((IntervalBase<int>)null, (IntervalBase<int>)null);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
[PexRaisedContractException]
public void OverlapTesterThrowsContractException461()
{
    IntervalBase<int> intervalBase;
    bool b;
    intervalBase = IntervalBaseFactory.Create(0, 0, false, false);
    b = this.OverlapTester(intervalBase, intervalBase);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
[PexRaisedContractException]
public void OverlapTesterThrowsContractException870()
{
    IntervalBase<int> intervalBase;
    bool b;
    intervalBase = IntervalBaseFactory.Create
                       (0, 0, PexSafeHelpers.ByteToBoolean((byte)32), false);
    b = this.OverlapTester(intervalBase, intervalBase);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
[PexRaisedContractException]
public void OverlapTesterThrowsContractException795()
{
    IntervalBase<int> intervalBase;
    bool b;
    intervalBase =
      IntervalBaseFactory.Create(0, 0, PexSafeHelpers.ByteToBoolean((byte)32), 
                                       PexSafeHelpers.ByteToBoolean((byte)32));
    b = this.OverlapTester(intervalBase, intervalBase);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
public void OverlapTester738()
{
    IntervalBase<int> intervalBase;
    bool b;
    intervalBase = IntervalBaseFactory.Create(4, 513, false, false);
    b = this.OverlapTester(intervalBase, intervalBase);
    Assert.AreEqual<bool>(true, b);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
[PexRaisedContractException]
public void OverlapTesterThrowsContractException916()
{
    IntervalBase<int> intervalBase;
    bool b;
    intervalBase = IntervalBaseFactory.Create(33, 1, false, false);
    b = this.OverlapTester(intervalBase, intervalBase);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
[PexRaisedContractException]
public void OverlapTesterThrowsContractException744()
{
    IntervalBase<int> intervalBase;
    IntervalBase<int> intervalBase1;
    bool b;
    intervalBase = IntervalBaseFactory.Create
                       (376048204, 376048204, PexSafeHelpers.ByteToBoolean((byte)128), 
                                              PexSafeHelpers.ByteToBoolean((byte)4));
    intervalBase1 = IntervalBaseFactory.Create(0, 0, false, false);
    b = this.OverlapTester(intervalBase, intervalBase1);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
[PexRaisedContractException]
public void OverlapTesterThrowsContractException694()
{
    IntervalBase<int> intervalBase;
    IntervalBase<int> intervalBase1;
    bool b;
    intervalBase = IntervalBaseFactory.Create
                       (168231428, 168231428, true, PexSafeHelpers.ByteToBoolean((byte)4));
    intervalBase1 = IntervalBaseFactory.Create(1, 0, false, false);
    b = this.OverlapTester(intervalBase, intervalBase1);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
public void OverlapTester948()
{
    IntervalBase<int> intervalBase;
    IntervalBase<int> intervalBase1;
    bool b;
    intervalBase =
      IntervalBaseFactory.Create(-2130361215, -2079649656, false, false);
    intervalBase1 =
      IntervalBaseFactory.Create(-1937013995, -1702133178, false, false);
    b = this.OverlapTester(intervalBase, intervalBase1);
    Assert.AreEqual<bool>(false, b);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
public void OverlapTester94801()
{
    IntervalBase<int> intervalBase;
    IntervalBase<int> intervalBase1;
    bool b;
    intervalBase = IntervalBaseFactory.Create(8, 9, false, false);
    intervalBase1 = IntervalBaseFactory.Create(0, 1, false, false);
    b = this.OverlapTester(intervalBase, intervalBase1);
    Assert.AreEqual<bool>(false, b);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
public void OverlapTester94802()
{
    IntervalBase<int> intervalBase;
    IntervalBase<int> intervalBase1;
    bool b;
    intervalBase = IntervalBaseFactory.Create(2359298, 322404608, false, false);
    intervalBase1 = IntervalBaseFactory.Create(322404608, 657948928, false, false);
    b = this.OverlapTester(intervalBase, intervalBase1);
    Assert.AreEqual<bool>(false, b);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
public void OverlapTester515()
{
    IntervalBase<int> intervalBase;
    IntervalBase<int> intervalBase1;
    bool b;
    intervalBase = IntervalBaseFactory.Create(2359298, 322404608, false, false);
    intervalBase1 = IntervalBaseFactory.Create(322404608, 657948928, true, false);
    b = this.OverlapTester(intervalBase, intervalBase1);
    Assert.AreEqual<bool>(false, b);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
public void OverlapTester94803()
{
    IntervalBase<int> intervalBase;
    IntervalBase<int> intervalBase1;
    bool b;
    intervalBase = IntervalBaseFactory.Create(-1525559168, -988229439, false, false);
    intervalBase1 =
      IntervalBaseFactory.Create(-1928846848, -1525559168, false, false);
    b = this.OverlapTester(intervalBase, intervalBase1);
    Assert.AreEqual<bool>(false, b);
}
[TestMethod]
[PexGeneratedBy(typeof(PexIntervals))]
public void OverlapTester757()
{
    IntervalBase<int> intervalBase;
    IntervalBase<int> intervalBase1;
    bool b;
    intervalBase = IntervalBaseFactory.Create(1, 8, true, false);
    intervalBase1 = IntervalBaseFactory.Create(0, 1, false, false);
    b = this.OverlapTester(intervalBase, intervalBase1);
    Assert.AreEqual<bool>(false, b);
}
    }
}
